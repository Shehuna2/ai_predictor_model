import pandas as pd
import os

def load_data(file_path):
    """
    Load data from a CSV file.
    
    Args:
        file_path (str): Path to the CSV file.
    
    Returns:
        pd.DataFrame: DataFrame containing the loaded data.
    """
    try:
        df = pd.read_csv(file_path)
        print(f"Data loaded from {file_path}")
        return df
    except FileNotFoundError:
        print(f"File not found: {file_path}")
        return None
    except Exception as e:
        print(f"Error loading data: {e}")
        return None

def preprocess_data(df):
    """
    Preprocess the data by handling missing values and adding derived columns.
    
    Args:
        df (pd.DataFrame): The raw DataFrame to preprocess.
    
    Returns:
        pd.DataFrame: The preprocessed DataFrame.
    """
    try:
        # Ensure timestamp is a datetime object
        df["timestamp"] = pd.to_datetime(df["timestamp"])
        
        # Sort by timestamp
        df = df.sort_values(by="timestamp")
        
        # Fill missing values (if any) using forward fill
        df.fillna(method="ffill", inplace=True)
        
        # Add derived columns (e.g., percentage change)
        df["price_change"] = df["close"].pct_change()  # Percentage change between close prices
        df["volatility"] = (df["high"] - df["low"]) / df["low"]  # Volatility ratio
        
        # Drop rows with NaN values generated by pct_change()
        df.dropna(inplace=True)
        
        return df
    except Exception as e:
        print(f"Error preprocessing data: {e}")
        return None

def save_preprocessed_data(df, file_path):
    """
    Save preprocessed DataFrame to CSV.
    
    Args:
        df (pd.DataFrame): The preprocessed DataFrame to save.
        file_path (str): Path to save the preprocessed file.
    """
    try:
        # Ensure directory exists
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        # Save to CSV
        df.to_csv(file_path, index=False)
        print(f"Preprocessed data saved to {file_path}")
    except Exception as e:
        print(f"Error saving preprocessed data: {e}")

if __name__ == "__main__":
    # Input and output file paths
    input_file = "../data/raw/eth_usdt_data.csv"
    output_file = "../data/processed/eth_usdt_preprocessed.csv"
    
    # Load raw data
    print("Loading data...")
    data = load_data(input_file)
    
    if data is not None:
        # Preprocess data
        print("Preprocessing data...")
        preprocessed_data = preprocess_data(data)
        
        if preprocessed_data is not None:
            # Save preprocessed data
            save_preprocessed_data(preprocessed_data, output_file)
